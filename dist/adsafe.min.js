/**
 * @preserve
 * @author Douglas Crockford <douglas@crockford.com>
 * @version 1.0.1
 * @description ADsafe, the JavaScript widget framework for advertising and mashups
 */
var ADSAFE;ADSAFE=function(){"use strict";function e(e){throw ADSAFE.log("ADsafe error: "+(e||"ADsafe violation.")),{name:"ADsafe",message:e||"ADsafe violation."}}function t(t){return"string"!=typeof t&&e("ADsafe string violation."),t}function n(e,n){return e&&"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,t(n))}function r(e){return"number"!=typeof e&&("string"!=typeof e||x[e]||"_"===e.charAt(0)||"_"===e.slice(-1))}function o(e,t){return"object"!=typeof e||r(t)}function i(t){t.window&&e()}function s(e){return e===d?g:(d=e,g=e.currentStyle||w.getComputedStyle(e,""))}function a(e,t,n){for(n||t(e),e=e.firstChild;e;)a(e,t),e=e.nextSibling}function l(e){a(e,function(e){e.tagName&&(e["___ on ___"]=null,e.change=null)})}function _(n,r){var o,i,s=[],a=r?/^\s*(?:([\*\/])|\[\s*([a-z][0-9a-z_\-]*)\s*(?:([!*~\|$\^]?=)\s*([0-9A-Za-z_\-*%&;.\/:!]+)\s*)?\]|#\s*([A-Z]+_[A-Z0-9]+)|:\s*([a-z]+)|([.&_>\+]?)\s*([a-z][0-9a-z\-]*))\s*/:/^\s*(?:([\*\/])|\[\s*([a-z][0-9a-z_\-]*)\s*(?:([!*~\|$\^]?=)\s*([0-9A-Za-z_\-*%&;.\/:!]+)\s*)?\]|#\s*([\-A-Za-z0-9_]+)|:\s*([a-z]+)|([.&_>\+]?)\s*([a-z][0-9a-z\-]*))\s*/;do{o=a.exec(t(n)),o||e("ADsafe: Bad query:"+n),o[1]?i={op:o[1]}:o[2]?i=o[3]?{op:"["+o[3],name:o[2],value:o[4]}:{op:"[",name:o[2]}:o[5]?((s.length>0||o[5].length<=r.length||o[5].slice(0,r.length)!==r)&&e("ADsafe: Bad query: "+n),i={op:"#",name:o[5]}):i=o[6]?{op:":"+o[6]}:{op:o[7],name:o[8]},s.push(i),n=n.slice(o[0].length)}while(n);return s}function f(t,n){var r,o,i,s;for(i=0;i<t.length;i+=1){if(r=t[i],A=r.name,"function"==typeof(o=v[r.op]))for(k&&e("ADsafe: Query violation: *"+r.op+(r.name||"")),N=[],s=0;s<n.length;s+=1)o(n[s]);else if(D=r.value,m=!1,"function"!=typeof(o=b[r.op]))switch(r.op){case":first":N=n.slice(0,1);break;case":rest":N=n.slice(1);break;default:e("ADsafe: Query violation: :"+r.op)}else for(N=[],s=0;s<n.length;s+=1)o(n[s])&&N.push(n[s]);n=N}return N}function u(o,a){function u(e){this.___nodes___=e,this.___star___=k&&e.length>1,k=!1}a?"DIV"!==o.tagName&&e("ADsafe: Bad node."):"BODY"!==o.tagName&&e("ADsafe: Bad node.");var h,c=!0,g=function(t){var n,r,o,i,s,a=t||event,l=a.type;switch(s=a.target||a.srcElement,r=new u([s]),o=r,l){case"mousedown":c=!0,document.selection&&(C=document.selection.createRange());break;case"focus":case"focusin":c=!0,y=s,a.cancelBubble=!1,l="focus";break;case"blur":case"focusout":c=!1,y=null,l="blur";break;case"keypress":switch(c=!0,y=s,n=String.fromCharCode(a.charCode||a.keyCode)){case"\r":case"\n":l="enterkey";break;case"":l="escapekey"}break;case"click":c=!0}if(a.cancelBubble&&a.stopPropagation&&a.stopPropagation(),i={altKey:a.altKey,ctrlKey:a.ctrlKey,bubble:function(){try{var t=o.getParent(),n=t.___nodes___[0];o=t,i.that=o,n["___ on ___"]&&n["___ on ___"][l]?o.fire(i):i.bubble()}catch(t){e(t)}},key:n,preventDefault:function(){a.preventDefault&&a.preventDefault(),a.returnValue=!1},shiftKey:a.shiftKey,target:r,that:o,type:l,x:a.clientX,y:a.clientY},s["___ on ___"]&&s["___ on ___"][i.type])r.fire(i);else for(;;){if(!(s=s.parentNode))break;if(s["___ on ___"]&&s["___ on ___"][i.type]){o=new u([s]),i.that=o,o.fire(i);break}if(s["___adsafe root___"])break}"escapekey"===i.type&&(p&&p.remove(),p=null),o=null,a=null,i=null,s=null};return o["___adsafe root___"]="___adsafe root___",u.prototype={append:function(t){i(this);var n,r,o,s,a=this.___nodes___,l=!1;if(0===a.length||!t)return this;if(Array.isArray(t))for(t.length!==a.length&&e("ADsafe: Array length: "+a.length+"-"+D.length),n=0;n<a.length;n+=1)for(s=t[n].___nodes___,r=0;r<s.length;r+=1)a[n].appendChild(s[r]);else for("string"!=typeof t&&(s=t.___nodes___),n=0;n<a.length;n+=1)if(o=a[n],s){for(r=0;r<s.length;r+=1)o.appendChild(l?s[r].cloneNode(!0):s[r]);l=!0}else o.appendChild(document.createTextNode(t));return this},blur:function(){i(this);var e,t,n=this.___nodes___;for(y=null,e=0;e<n.length;e+=1)t=n[e],t.blur&&t.blur();return this},check:function(t){i(this);var n,r,o=this.___nodes___;if(Array.isArray(t))for(t.length!==o.length&&e("ADsafe: Array length: "+o.length+"-"+t.length),n=0;n<o.length;n+=1)r=o[n],r.tagName&&(r.checked=!!t[n]);else for(n=0;n<o.length;n+=1)r=o[n],r.tagName&&(r.checked=!!t);return this},class:function(n){i(this);var r,o,s=this.___nodes___;if(Array.isArray(n))for(n.length!==s.length&&e("ADsafe: Array length: "+s.length+"-"+n.length),r=0;r<s.length;r+=1)/url/i.test(t(n[r]))&&e("ADsafe error."),o=s[r],o.tagName&&(o.className=n[r]);else for(/url/i.test(t(n))&&e("ADsafe error."),r=0;r<s.length;r+=1)o=s[r],o.tagName&&(o.className=n);return this},clone:function(e,t){var n,r,o,i=[],s=this.___nodes___,a=t||1;for(r=0;r<a;r+=1){for(n=[],o=0;o<s.length;o+=1)n.push(s[o].cloneNode(e));i.push(new u(n))}return t?i:i[0]},count:function(){return i(this),this.___nodes___.length},each:function(t){i(this);var n,r=this.___nodes___;if("function"==typeof t){for(n=0;n<r.length;n+=1)t(new u([r[n]]));return this}e()},empty:function(){i(this);var t,n,r=this.___nodes___;if(Array.isArray(D))for(D.length!==r.length&&e("ADsafe: Array length: "+r.length+"-"+D.length),t=0;t<r.length;t+=1)for(n=r[t];n.firstChild;)l(n),n.removeChild(n.firstChild);else for(t=0;t<r.length;t+=1)for(n=r[t];n.firstChild;)l(n),n.removeChild(n.firstChild);return this},enable:function(t){i(this);var n,r,o=this.___nodes___;if(Array.isArray(t))for(t.length!==o.length&&e("ADsafe: Array length: "+o.length+"-"+t.length),n=0;n<o.length;n+=1)r=o[n],r.tagName&&(r.disabled=!t[n]);else for(n=0;n<o.length;n+=1)r=o[n],r.tagName&&(r.disabled=!t);return this},ephemeral:function(){return i(this),p&&p.remove(),p=this,this},explode:function(){i(this);var e,t=[],n=this.___nodes___;for(e=0;e<n.length;e+=1)t[e]=new u([n[e]]);return t},fire:function(t){i(this);var r,o,s,a,l,_,f,u;for("string"==typeof t?(u=t,t={type:u}):"object"==typeof t?u=t.type:e(),o=this.___nodes___,l=o.length,s=0;s<l;s+=1)if(_=o[s],f=_["___ on ___"],n(f,u))for(r=f[u],a=0;a<r.length;a+=1)r[a].call(this,t);return this},focus:function(){i(this);var t=this.___nodes___;if(t.length>0&&c)return y=t[0].focus(),this;e()},fragment:function(){return i(this),new u([document.createDocumentFragment()])},getCheck:function(){return this.getChecks()[0]},getChecks:function(){i(this);var e,t=[],n=this.___nodes___;for(e=0;e<n.length;e+=1)t[e]=n[e].checked;return t},getClass:function(){return this.getClasses()[0]},getClasses:function(){i(this);var e,t=[],n=this.___nodes___;for(e=0;e<n.length;e+=1)t[e]=n[e].className;return t},getMark:function(){return this.getMarks()[0]},getMarks:function(){i(this);var e,t=[],n=this.___nodes___;for(e=0;e<n.length;e+=1)t[e]=n[e]["_adsafe mark_"];return t},getName:function(){return this.getNames()[0]},getNames:function(){i(this);var e,t=[],n=this.___nodes___;for(e=0;e<n.length;e+=1)t[e]=n[e].name;return t},getOffsetHeight:function(){return this.getOffsetHeights()[0]},getOffsetHeights:function(){i(this);var e,t=[],n=this.___nodes___;for(e=0;e<n.length;e+=1)t[e]=n[e].offsetHeight;return t},getOffsetWidth:function(){return this.getOffsetWidths()[0]},getOffsetWidths:function(){i(this);var e,t=[],n=this.___nodes___;for(e=0;e<n.length;e+=1)t[e]=n[e].offsetWidth;return t},getParent:function(){i(this);var t,n,r=[],o=this.___nodes___;for(t=0;t<o.length;t+=1)n=o[t].parentNode,n["___adsafe root___"]&&e("ADsafe parent violation."),r[t]=n;return new u(r)},getSelection:function(){i(this);var e,t,n,r,o=this.___nodes___;if(1===o.length&&c){if(t=o[0],"number"==typeof t.selectionStart)return n=t.selectionStart,e=t.selectionEnd,t.value.slice(n,e);if(r=t.createTextRange(),r.expand("textedit"),r.inRange(C))return C.text}return null},getStyle:function(e){return this.getStyles(e)[0]},getStyles:function(t){i(this),r(t)&&e("ADsafe style violation.");var n,o,a,l=[],_=this.___nodes___;for(n=0;n<_.length;n+=1)o=_[n],o.tagName&&"string"==typeof(a="float"!==t?s(o)[t]:s(o).cssFloat||s(o).styleFloat)&&(l[n]=a);return l},getTagName:function(){return this.getTagNames()[0]},getTagNames:function(){i(this);var e,t,n=[],r=this.___nodes___;for(e=0;e<r.length;e+=1)t=r[e].tagName,n[e]="string"==typeof t?t.toLowerCase():t;return n},getTitle:function(){return this.getTitles()[0]},getTitles:function(){i(this);var e,t=[],n=this.___nodes___;for(e=0;e<n.length;e+=1)t[e]=n[e].title;return t},getValue:function(){return this.getValues()[0]},getValues:function(){i(this);var e,t,n=[],r=this.___nodes___;for(e=0;e<r.length;e+=1)t=r[e],"#text"===t.nodeName?n[e]=t.nodeValue:t.tagName&&"password"!==t.type&&(n[e]=t.value,!n[e]&&t.firstChild&&"#text"===t.firstChild.nodeName&&(n[e]=t.firstChild.nodeValue));return n},indeterminate:function(t){i(this);var n,r,o=this.___nodes___;if(Array.isArray(t))for(t.length!==o.length&&e("ADsafe: Array length: "+o.length+"-"+t.length),n=0;n<o.length;n+=1)r=o[n],r.tagName&&(r.indeterminate=!!t[n]);else for(n=0;n<o.length;n+=1)r=o[n],r.tagName&&(r.indeterminate=!!t);return this},klass:function(e){return this.class(e)},mark:function(t){i(this);var n,r,o=this.___nodes___;if(Array.isArray(t))for(t.length!==o.length&&e("ADsafe: Array length: "+o.length+"-"+t.length),n=0;n<o.length;n+=1)r=o[n],r.tagName&&(r["_adsafe mark_"]=String(t[n]));else for(n=0;n<o.length;n+=1)r=o[n],r.tagName&&(r["_adsafe mark_"]=String(t));return this},off:function(e){i(this);var t,n,r=this.___nodes___;for(t=0;t<r.length;t+=1)n=r[t],"string"==typeof e?"object"==typeof n["___ on ___"]&&(n["___ on ___"][e]=null):n["___ on ___"]=null;return this},on:function(t,r){i(this),"string"==typeof t&&"function"==typeof r||e();var o,s,a,l,_=this.___nodes___;for(o=0;o<_.length;o+=1)s=_[o],"change"===t&&(l="on"+t,s[l]!==g&&(s[l]=g)),a=s["___ on ___"],a||(a={},s["___ on ___"]=a),n(a,t)?a[t].push(r):a[t]=[r];return this},protect:function(){i(this);var e,t=this.___nodes___;for(e=0;e<t.length;e+=1)t[e]["___adsafe root___"]="___adsafe root___";return this},q:function(e){return i(this),k=this.___star___,new u(f(_(t(e),a),this.___nodes___))},remove:function(){i(this),this.replace()},replace:function(t){i(this);var n,r,o,s,a,_,f=this.___nodes___,u=!1;if(0!==f.length){for(n=0;n<f.length;n+=1)l(f[n]);if(!t||0===t.length||t.___nodes___&&0===t.___nodes___.length)for(n=0;n<f.length;n+=1)s=f[n],l(s),s.parentNode&&s.parentNode.removeChild(s);else if(Array.isArray(t)){for(t.length!==f.length&&e("ADsafe: Array length: "+f.length+"-"+D.length),n=0;n<f.length;n+=1)if(s=f[n],a=s.parentNode,l(s),a)if(_=t[n].___nodes___,_.length>0)for(o=_[0],a.replaceChild(o,s),r=1;r<_.length;r+=1)s=o,o=_[r],a.insertBefore(o,s.nextSibling);else a.removeChild(s)}else for(_=t.___nodes___,n=0;n<f.length;n+=1)if(s=f[n],l(s),a=s.parentNode){for(o=u?_[0].cloneNode(!0):_[0],a.replaceChild(o,s),r=1;r<_.length;r+=1)s=o,o=u?_[r].clone(!0):_[r],a.insertBefore(o,s.nextSibling);u=!0}return this}},select:function(){i(this);var t=this.___nodes___;return(t.length<1||!c)&&e(),t[0].focus(),t[0].select(),this},selection:function(e){i(this),t(e);var n,r,o,s,a,l=this.___nodes___;return 1===l.length&&c&&(r=l[0],"number"==typeof r.selectionStart?(s=r.selectionStart,n=r.selectionEnd,o=r.value,r.value=o.slice(0,s)+e+o.slice(n),r.selectionStart=s+e.length,r.selectionEnd=s+e.length,r.focus()):(a=r.createTextRange(),a.expand("textedit"),a.inRange(C)&&(C.select(),C.text=e,C.select()))),this},style:function(n,o){i(this),r(n)&&e("ADsafe style violation."),(void 0===o||/url/i.test(t(o)))&&e();var s,a,l,_=this.___nodes___;if(Array.isArray(o))for(o.length!==_.length&&e("ADsafe: Array length: "+_.length+"-"+o.length),s=0;s<_.length;s+=1)a=_[s],l=t(o[s]),/url/i.test(l)&&e(),a.tagName&&("float"!==n?a.style[n]=l:(a.style.cssFloat=l,a.style.styleFloat=l));else for(l=t(o),/url/i.test(l)&&e(),s=0;s<_.length;s+=1)a=_[s],a.tagName&&("float"!==n?a.style[n]=l:(a.style.cssFloat=l,a.style.styleFloat=l));return this},tag:function(n,r,o){i(this);var s;return"string"!=typeof n&&e(),E[n]!==!0&&e("ADsafe: Bad tag: "+n),s=document.createElement(n),o&&(s.autocomplete="off",s.name=t(o)),r&&(s.type=t(r)),new u([s])},text:function(e){i(this);var n,r;if(Array.isArray(e)){for(n=[],r=0;r<e.length;r+=1)n[r]=document.createTextNode(t(e[r]));return new u(n)}return new u([document.createTextNode(t(e))])},title:function(n){i(this);var r,o,s=this.___nodes___;if(Array.isArray(n))for(n.length!==s.length&&e("ADsafe: Array length: "+s.length+"-"+n.length),r=0;r<s.length;r+=1)o=s[r],o.tagName&&(o.title=t(n[r]));else for(t(n),r=0;r<s.length;r+=1)o=s[r],o.tagName&&(o.title=n);return this},value:function(t){i(this),void 0===t&&e();var n,r,o=this.___nodes___;if(Array.isArray(t)&&o.length===t.length)for(n=0;n<o.length;n+=1)if(r=o[n],r.tagName){if("password"!==r.type)if("string"==typeof r.value)r.value=t[n];else{for(;r.firstChild;)l(r.firstChild),r.removeChild(r.firstChild);r.appendChild(document.createTextNode(String(t[n])))}}else"#text"===r.nodeName&&(r.nodeValue=String(t[n]));else for(t=String(t),n=0;n<o.length;n+=1)if(r=o[n],r.tagName)if("BUTTON"!==r.tagName&&"string"==typeof r.value)r.value=t;else{for(;r.firstChild;)l(r.firstChild),r.removeChild(r.firstChild);r.appendChild(document.createTextNode(t))}else"#text"===r.nodeName&&(r.nodeValue=t);return this}},h={append:function(e){var t,n,r="string"==typeof e?[document.createTextNode(e)]:e.___nodes___;for(t=0;t<r.length;t+=1)n=r[t],"string"!=typeof n&&"number"!=typeof n||(n=document.createTextNode(String(n))),o.appendChild(n);return h},combine:function(t){t&&t.length||e("ADsafe: Bad combination.");var n,r=t[0].___nodes___;for(n=0;n<t.length;n+=1)r=r.concat(t[n].___nodes___);return new u(r)},count:function(){return 1},ephemeral:function(e){return p&&p.remove(),p=e,h},fragment:function(){return new u([document.createDocumentFragment()])},prepend:function(e){var t,n=e.___nodes___;for(t=0;t<n.length;t+=1)o.insertBefore(n[t],o.firstChild);return h},q:function(t){k=!1;var n=_(t,a);return"function"!=typeof v[n[0].op]&&e("ADsafe: Bad query: "+n[0]),new u(f(n,[o]))},remove:function(){l(o),o.parent.removeElement(o),o=null},row:function(e){var t,n,r=document.createElement("tr");for(n=0;n<e.length;n+=1)t=document.createElement("td"),t.appendChild(document.createTextNode(String(e[n]))),r.appendChild(t);return new u([r])},tag:function(t,n,r){var o;return"string"!=typeof t&&e(),E[t]!==!0&&e("ADsafe: Bad tag: "+t),o=document.createElement(t),r&&(o.autocomplete="off",o.name=r),n&&(o.type=n),new u([o])},text:function(e){var n,r;if(Array.isArray(e)){for(n=[],r=0;r<e.length;r+=1)n[r]=document.createTextNode(t(e[r]));return new u(n)}return new u([document.createTextNode(t(e))])}},"function"==typeof o.addEventListener?(o.addEventListener("focus",g,!0),o.addEventListener("blur",g,!0),o.addEventListener("mouseover",g,!0),o.addEventListener("mouseout",g,!0),o.addEventListener("mouseup",g,!0),o.addEventListener("mousedown",g,!0),o.addEventListener("mousemove",g,!0),o.addEventListener("click",g,!0),o.addEventListener("dblclick",g,!0),o.addEventListener("keypress",g,!0)):(o.onclick=g,o.ondblclick=g,o.onfocusin=g,o.onfocusout=g,o.onkeypress=g,o.onmouseout=g,o.onmousedown=g,o.onmousemove=g,o.onmouseover=g,o.onmouseup=g),[h,u.prototype]}var h,c,g,d,p,m,y,v,A,b,N,k,C,D,x={arguments:!0,callee:!0,caller:!0,constructor:!0,eval:!0,prototype:!0,stack:!0,unwatch:!0,valueOf:!0,watch:!0},w=document.defaultView,S=[],E={a:!0,abbr:!0,acronym:!0,address:!0,area:!0,b:!0,bdo:!0,big:!0,blockquote:!0,br:!0,button:!0,canvas:!0,caption:!0,center:!0,cite:!0,code:!0,col:!0,colgroup:!0,dd:!0,del:!0,dfn:!0,dir:!0,div:!0,dl:!0,dt:!0,em:!0,fieldset:!0,font:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,hr:!0,i:!0,img:!0,input:!0,ins:!0,kbd:!0,label:!0,legend:!0,li:!0,map:!0,menu:!0,object:!0,ol:!0,optgroup:!0,option:!0,p:!0,pre:!0,q:!0,samp:!0,select:!0,small:!0,span:!0,strong:!0,sub:!0,sup:!0,table:!0,tbody:!0,td:!0,textarea:!0,tfoot:!0,th:!0,thead:!0,tr:!0,tt:!0,u:!0,ul:!0,var:!0};return v={"":function(e){var t,n,r,o=e.getElementsByTagName(A);try{t=Array.prototype.slice.call(o,0),N=N.length?N.concat(t):t}catch(e){for(r=o.length,n=0;n<r;n+=1)N.push(o[n])}},"+":function(e){for(e=e.nextSibling,A=A.toUpperCase();e&&!e.tagName;)e=e.nextSibling;e&&e.tagName===A&&N.push(e)},">":function(e){for(e=e.firstChild,A=A.toUpperCase();e;)e.tagName===A&&N.push(e),e=e.nextSibling},"#":function(){var e=document.getElementById(A);e.tagName&&N.push(e)},"/":function(e){var t,n=e.childNodes,r=n.length;for(t=0;t<r;t+=1)N.push(n[t])},"*":function(e){k=!0,a(e,function(e){N.push(e)},!0)}},b={".":function(e){return(" "+e.className+" ").indexOf(" "+A+" ")>=0},"&":function(e){return e.name===A},_:function(e){return e.type===A},"[":function(e){return"string"==typeof e[A]},"[=":function(e){var t=e[A];return"string"==typeof t&&t===D},"[!=":function(e){var t=e[A];return"string"==typeof t&&t!==D},"[^=":function(e){var t=e[A];return"string"==typeof t&&t.slice(0,t.length)===D},"[$=":function(e){var t=e[A];return"string"==typeof t&&t.slice(-t.length)===D},"[*=":function(e){var t=e[A];return"string"==typeof t&&t.indexOf(D)>=0},"[~=":function(e){var t=e[A];if("string"==typeof t)return t=" "+t+" ",t.indexOf(" "+D+" ")>=0},"[|=":function(e){var t=e[A];if("string"==typeof t)return t="-"+t+"-",t.indexOf("-"+D+"-")>=0},":blur":function(e){return e!==y},":checked":function(e){return e.checked},":disabled":function(e){return e.tagName&&e.disabled},":enabled":function(e){return e.tagName&&!e.disabled},":even":function(e){var t;return!!e.tagName&&(t=m,m=!m,t)},":focus":function(e){return e===y},":hidden":function(e){return e.tagName&&"visible"!==s(e).visibility},":odd":function(e){return!!e.tagName&&(m=!m)},":tag":function(e){return e.tagName},":text":function(e){return"#text"===e.nodeName},":trim":function(e){return"#text"!==e.nodeName||/\W/.test(e.nodeValue)},":unchecked":function(e){return e.tagName&&!e.checked},":visible":function(e){return e.tagName&&"visible"===s(e).visibility}},{create:function(e){return i(e),Object.create(e)},get:function(t,n){if(i(t),!o(t,n))return t[n];e()},go:function(t,n){var r,o,i,s,a;h&&h!==t&&e(),i=document.getElementById(t),"DIV"!==i.tagName&&e(),h=null,a=i.getElementsByTagName("script"),(s=a.length-1)<0&&e();do{i.removeChild(a[s]),s-=1}while(s>=0);for(i=u(i,t),r=i[0],s=0;s<S.length;s+=1)if("function"==typeof(o=S[s]))try{o(t,r,c,i[1])}catch(e){ADSAFE.log(e)}try{n(r,c)}catch(e){ADSAFE.log(e)}i=null,c=null},has:function(e,t){return n(e,t)},id:function(t){h&&e(),h=t,c={}},isArray:Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.apply(e)},keys:Object.keys,later:function(t,n){"function"==typeof t?setTimeout(t,n||0):e()},lib:function(t,n){h&&!r(t)||e("ADsafe lib violation."),c[t]=n(c)},log:function(e){window.console?console.log(e):"object"==typeof Debug?Debug.writeln(e):opera.postError(e)},remove:function(t,n){if(!o(t,n))return void delete t[n];e()},set:function(t,n,r){if(i(t),!o(t,n))return void(t[n]=r);e()},_intercept:function(e){S.push(e)}}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
